name: Container image

on:
  release:
    types: [created]

  # Run build for any PRs - we won't push in those however
  pull_request:
    branches:
      - main

  # Publish `main` as Docker `dev` image.
  push:
    branches:
      - main

concurrency:
  group: build-${{ github.ref }}
  cancel-in-progress: true

env:
  IMAGE_NAME: projectcaluma/alexandria
  REGISTRY: ghcr.io

jobs:
  # Push image to GitHub Packages.
  # See also https://docs.docker.com/build/ci/github-actions/
  container-registry:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
      id-token: write # needed for signing the images with GitHub OIDC using cosign

    steps:
      - uses: actions/checkout@v4

      - uses: sigstore/cosign-installer@v3.4.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=dev,enable={{is_default_branch}}
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

      - name: Build
        id: docker
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.16.1
        with:
          image-ref: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}'
          format: 'json'
          ignore-unfixed: true
          list-all-pkgs: true
          output: 'trivy.json'

      - name: Convert trivy results to sarif
        uses: aquasecurity/trivy-action@0.16.1
        with:
          image-ref: trivy.json
          scan-type: 'convert'
          format: 'sarif'
          # we don't actually limit them, but this gates the convert action
          limit-severities-for-sarif: true
          # empty makes it skip the --vuln-type arg
          vuln-type: ''
          output: 'trivy.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy.sarif'

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        if: github.event_name != 'pull_request'
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push
        id: docker_push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Sign the images with GitHub OIDC Token using cosign
        run: cosign sign --yes ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.docker_push.outputs.digest }}
        if: github.event_name != 'pull_request' && startsWith(github.event.ref, 'refs/tags/v')
        env:
          TAGS: ${{ steps.meta.outputs.tags }}

      - name: Convert trivy results to CycloneDX
        uses: aquasecurity/trivy-action@0.16.1
        with:
          image-ref: trivy.json
          scan-type: 'convert'
          format: 'cyclonedx'
          # we don't actually limit them, but this gates the convert action
          limit-severities-for-sarif: true
          # empty makes it skip the --vuln-type arg
          vuln-type: ''
          output: 'trivy.cdx'

      - name: Attach an SBOM attestation to the signed image
        run: cosign attest --yes --type cyclonedx --predicate trivy.cdx ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.docker_push.outputs.digest }}
        if: github.event_name != 'pull_request' && startsWith(github.event.ref, 'refs/tags/v')

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.14.0

      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install chart-testing
        uses: helm/chart-testing-action@v2

      - name: Run chart-testing (lint)
        run: ct --config=deploy/ct.yaml lint

      - name: Create kind cluster
        uses: helm/kind-action@v1

      - name: Load dev image into K8s
        run: |
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:dev
          kind load docker-image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:dev --name chart-testing

      - name: Run chart-testing (install)
        run: ct --config=deploy/ct.yaml install

      - name: Prepare Chart Metadata
        id: chartmeta
        run: echo version=${GITHUB_REF#refs/tags/v} >> $GITHUB_OUTPUT
        if: github.event_name != 'pull_request' && startsWith(github.event.ref, 'refs/tags/v')

      - name: Push Chart
        run: |
          helm repo add minio https://charts.min.io
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm dep build deploy/charts/alexandria
          helm package --version ${{ steps.chartmeta.outputs.version }} --app-version ${{ steps.meta.outputs.version }} --destination=dist deploy/charts/alexandria
          helm push dist/*.tgz oci://${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-helm
        if: github.event_name != 'pull_request' && startsWith(github.event.ref, 'refs/tags/v')
